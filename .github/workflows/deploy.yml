name: Deploy CloudFormation Stack to Main

on:
  push:
    branches:
      - main  # Triggers deployment when changes are pushed to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Enables OpenID Connect (OIDC) authentication
      contents: read

    steps:
      # Step 1: Checkout the repo
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials (Using OIDC)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::401907937551:role/OIDC_practice_cicd_pipeline  # ‚úÖ Replace with your IAM role ARN
          aws-region: eu-west-2  # ‚úÖ Ensure the correct region is used

      # Step 3: Debug CloudFormation Stack Status (Prevents Deployment Stalls)
      - name: Debug CloudFormation Stack
        run: |
          echo "Checking stack status..."
          aws cloudformation describe-stacks --stack-name staging-cloudfront-stack --region eu-west-2 || echo "No existing stack found."

          echo "Checking existing change sets..."
          aws cloudformation list-change-sets --stack-name staging-cloudfront-stack --region eu-west-2 || echo "No change sets found."

      # Step 4: Validate CloudFormation Template
      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://main.yml

      # Step 5: Cleanup Any Failed Change Sets Before Deployment
      - name: Cleanup Old Change Sets
        run: |
          CHANGE_SETS=$(aws cloudformation list-change-sets --stack-name staging-cloudfront-stack --region eu-west-2 --query "Summaries[?ExecutionStatus=='FAILED'].ChangeSetName" --output text)
          if [[ ! -z "$CHANGE_SETS" ]]; then
            echo "Deleting failed change sets..."
            for cs in $CHANGE_SETS; do
              aws cloudformation delete-change-set --stack-name staging-cloudfront-stack --change-set-name "$cs" --region eu-west-2
            done
          else
            echo "No failed change sets to delete."
          fi

      # Step 6: Ensure CloudFormation Stack is Created or Updated
      - name: Create or Update CloudFormation Stack
        run: |
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name staging-cloudfront-stack --region eu-west-2 --query "Stacks[0].StackStatus" --output text 2>/dev/null || echo "DOES_NOT_EXIST")

          if [[ "$STACK_STATUS" == "DOES_NOT_EXIST" ]]; then
            echo "üöÄ Stack does not exist. Creating a new CloudFormation stack..."
            aws cloudformation create-stack \
              --stack-name staging-cloudfront-stack \
              --template-body file://main.yml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides DomainName=resume.staging.com \
              --region eu-west-2

            echo "‚è≥ Waiting for stack creation to complete..."
            aws cloudformation wait stack-create-complete --stack-name staging-cloudfront-stack --region eu-west-2
          else
            echo "‚úÖ Stack already exists. Updating stack..."
            aws cloudformation deploy \
              --stack-name staging-cloudfront-stack \
              --template-file main.yml \
              --capabilities CAPABILITY_NAMED_IAM \
              --parameter-overrides DomainName=resume.staging.com \
              --region eu-west-2 \
              --no-fail-on-empty-changeset
          fi
